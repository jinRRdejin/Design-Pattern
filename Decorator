装饰器模式
装饰器模式，顾名思义，就是对已经存在的某些类进行装饰，以此来扩展一些功能
例如 ：component  concreteComponent Decorate conCreteDecorator

Component为统一接口，也是装饰类和被装饰类的基本类型。
ConcreteComponent为具体实现类，也是被装饰类，他本身是个具有一些功能的完整的类。
Decorator是装饰类，实现了Component接口的同时还在内部维护了一个ConcreteComponent的实例
ConcreteDecorator是具体的装饰产品类，每一种装饰产品都具有特定的装饰效果

//基础接口
public interface Component {
    
    public void biu();
}
//具体实现类
public class ConcretComponent implements Component {

    public void biu() {
        
        System.out.println("biubiubiu");
    }
}
//装饰类
public class Decorator implements Component {

    public Component component;
    
    public Decorator(Component component) {
        
        this.component = component;
    }
    
    public void biu() {
        
        this.component.biu();
    }
}
//具体装饰类
public class ConcreteDecorator extends Decorator {

    public ConcreteDecorator(Component component) {

        super(component);
    }

    public void biu() {
        
        System.out.println("ready?go!");
        this.component.biu();
    }
}
　　//使用装饰器
　　Component component = new ConcreteDecorator(new ConcretComponent());
　　component.biu();

　　//console：
　　ready?go!
　　biubiubiu
=====================================================================  
  装饰类优点
  装饰器的价值在于装饰，他并不影响被装饰类本身的核心功能。在一个继承的体系中，子类通常是互斥的；
  
  有相似处理内容的两个类，就可以通过装饰类来完成例如：做鱼 红烧 水煮，同样做鱼，有相同的准备步骤清理鱼 ，不同的是红烧水煮，清理鱼的步骤就可以放到
  具体实现类中，而红烧和水煮的分别放到装饰类的具体实现类中；
  装饰模式的优缺点
装饰模式优点：

　　1. 装饰模式可以提供比继承更多地灵活性。
　　2. 可以通过一种动态的方式来扩展一个对象的功能，在运行时选择不同的装饰器，从而实现不同的行为。
　　3. 通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。
　　4. 具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，在使用时再对其进行组合，原有代码无须改变，符合“开闭原则”。

缺点：

　　1. 会产生很多的小对象（具体装饰类），增加了系统的复杂性。
　　2. 这种比继承更加灵活机动的特性，也同时意味着装饰模式比继承易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。
  
  装饰模式：

　　在不改变接口的前提下，动态扩展对象的访问。
　　动态继承，让类具有在运行期改变行为的能力。	
　　装饰模式，突出的是运行期增加行为，这和继承是不同的，继承是在编译期增加行为。
　　强调：增强
  
  代理模式：

　　在不改变接口的前提下，控制对象的访问。
　　1.从封装的角度讲，是为了解决类与类之间相互调用而由此导致的耦合关系，可以说是接口的另外一个层引用。
　　　　比如：在a类->b代理->c类这个关系中，c类的一切行为都隐藏在b中。即调用者不知道要访问的内容与代理了什么对象。
　　2.从复用的角度讲，可以解决不同类调用一个复杂类时，仅仅因较小的改变而导致整个复杂类新建一个类。
　　　　比如：a类->c类1；b类->c类2。
　　　　可以变为a类->ca代理类->c类；b类->cb代理类-c类。
　　代理模式，是类之间的封装和（某方面的）复用。
　　强调：限制
  
  二者的比较
　　通过上述的例子可以看出，代理模式和装饰模式非常类似，甚至代码都类似。二者最主要的区别是：代理模式中，
  代理类对被代理的对象有控制权，决定其执行或者不执行。
  而装饰模式中，装饰类对代理对象没有控制权，只能为其增加一层装饰，以加强被装饰对象的功能，仅此而已。
  
  https://www.cnblogs.com/luoxn28/p/5535877.html
  
  
  
  
  






